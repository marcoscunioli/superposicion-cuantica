# superpos_qiskit_streamlit.py
# 
# Demostraciones interactivas del m√≥dulo "Superposici√≥n con Qiskit" en Streamlit (Qiskit 1.x)
# Autor√≠a visible al inicio, explicaci√≥n pedag√≥gica y guardado autom√°tico de figuras PNG.
# 
# Pasos incluidos (en pesta√±as):
# 1) Moneda cu√°ntica (H + medida)
# 2) Valores esperados <Z>, <X> sin medir (Statevector)
# 3) Dos Hadamard seguidas (interferencia H¬∑H = I)
# 4) Fase œÄ entre dos H (cambia el resultado a '1')
# 5) Elegir fase œÜ para ~25%/75% (œÜ = 2œÄ/3 por defecto, ajustable)
# 6) Visualizaci√≥n en esfera de Bloch
# 
# Requisitos de instalaci√≥n (en consola):
#   pip install streamlit qiskit qiskit-aer
# Ejecuci√≥n:
#   streamlit run superpos_qiskit_streamlit.py

from __future__ import annotations

import io
import math
from datetime import datetime
from pathlib import Path

import streamlit as st
import numpy as np
import matplotlib.pyplot as plt

from qiskit import QuantumCircuit, transpile
from qiskit.visualization import plot_histogram, plot_bloch_multivector
from qiskit.quantum_info import Statevector, Pauli
from qiskit_aer import AerSimulator

# =================== Configuraci√≥n de p√°gina ===================
st.set_page_config(
    page_title="Superposici√≥n con Qiskit ‚Äî Demostrador",
    page_icon="üß™",
    layout="centered",
)

# ============== Banner con autor√≠a (pedido por el usuario) ==============
BANNER = "Script desarrollado por Marcos Sebastian Cunioli - Especialista en Ciberseguridad"
st.success(BANNER)

# =================== Par√°metros y utilidades ===================
if "STAMP" not in st.session_state:
    st.session_state.STAMP = datetime.now().strftime("%Y%m%d-%H%M%S")
STAMP = st.session_state.STAMP

OUTPUT_DIR = Path(st.sidebar.text_input("Carpeta para guardar PNGs", value="figuras"))
SAVE_PNGS = st.sidebar.checkbox("Guardar figuras como PNG", value=True)
DEFAULT_SHOTS = st.sidebar.slider("Shots (repeticiones por corrida)", 100, 50000, 1000, step=100)

st.sidebar.caption(
    f"Las im√°genes se guardar√°n con timestamp {STAMP} en: {OUTPUT_DIR.resolve()}"
)

@st.cache_resource(show_spinner=False)
def get_simulator() -> AerSimulator:
    return AerSimulator()


def ensure_outdir(directory: Path) -> None:
    try:
        directory.mkdir(parents=True, exist_ok=True)
    except Exception as e:
        st.warning(f"No se pudo crear la carpeta '{directory}': {e}")


def save_fig(fig, base_name: str) -> None:
    """Guardar figura PNG en OUTPUT_DIR con timestamp."""
    ensure_outdir(OUTPUT_DIR)
    fname = OUTPUT_DIR / f"{STAMP}_{base_name}.png"
    try:
        fig.savefig(fname, bbox_inches="tight", dpi=200)
        st.info(f"üñºÔ∏è Guardado: {fname}")
    except Exception as e:
        st.warning(f"No se pudo guardar {fname}: {e}")
    finally:
        plt.close(fig)


def draw_circuit_text(qc: QuantumCircuit) -> str:
    """Render del circuito en formato texto para mostrar en c√≥digo."""
    try:
        return qc.draw(output="text").__str__()
    except Exception:
        return "(No fue posible dibujar el circuito en texto)"


def run_and_plot_counts(qc: QuantumCircuit, shots: int, title: str, base_name: str | None = None):
    """Compila, ejecuta en AerSimulator y muestra/guarda histograma de counts."""
    sim = get_simulator()
    qct = transpile(qc, sim)
    result = sim.run(qct, shots=shots).result()
    counts = result.get_counts()

    st.code(draw_circuit_text(qc), language="text")

    # Histograma
    try:
        fig = plot_histogram(counts, title=title)
        st.pyplot(fig)
        if SAVE_PNGS and base_name:
            save_fig(fig, base_name)
        else:
            plt.close(fig)
    except Exception as e:
        st.warning(f"No se pudo mostrar/guardar el histograma: {e}")

    return counts


# =================== Cabecera did√°ctica ===================
st.title("Superposici√≥n cu√°ntica: demostrador interactivo")

st.markdown(
    """
    **¬øQu√© vas a ver aqu√≠?**

    La **superposici√≥n cu√°ntica** es la capacidad de un qubit de estar en una combinaci√≥n de \n
    los estados `|0‚ü©` y `|1‚ü©` al mismo tiempo. La puerta **Hadamard (H)** crea esa mezcla: \n
    transforma `|0‚ü©` en `|+‚ü©` (50% `0`, 50% `1`). Si luego **medimos**, la superposici√≥n colapsa \n
    a un resultado cl√°sico (0 o 1), pero **si no medimos**, podemos analizar el estado con \n
    vectores de estado y expectativas como ‚ü®Z‚ü© o ‚ü®X‚ü©.

    Este demostrador te gu√≠a paso a paso con ideas clave:

    - **Azar controlado:** con H sobre `|0‚ü©` obtienes resultados 50/50.
    - **Interferencia:** aplicar H dos veces (H¬∑H) equivale a no hacer nada (identidad).
    - **Fase:** insertar una **fase œÜ** entre dos H cambia las probabilidades de medir 0/1.
    - **Geometr√≠a:** la **esfera de Bloch** te ayuda a visualizar la posici√≥n del estado.

    Ajusta *shots*, cambia la fase y observa c√≥mo responden las probabilidades. 
    """
)

# =================== Verificaci√≥n de paquetes ===================
with st.expander("Verificaci√≥n r√°pida de paquetes"):
    try:
        import qiskit as _qiskit
        import qiskit_aer as _qa
        import qiskit_ibm_runtime as _qir
        st.success("‚úÖ Qiskit importado correctamente")
        st.write(f"qiskit-aer versi√≥n: {_qa.__version__}")
        st.write(f"qiskit-ibm-runtime versi√≥n: {_qir.__version__}")
    except Exception as e:
        st.error("‚ö†Ô∏è Problema importando paquetes. Aseg√∫rate de instalar: 'pip install qiskit qiskit-aer'.")
        st.exception(e)

# =================== Pesta√±as por paso ===================
tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs([
    "1) Moneda cu√°ntica",
    "2) ‚ü®Z‚ü© y ‚ü®X‚ü© (sin medir)",
    "3) Dos H seguidas",
    "4) Fase œÄ entre H",
    "5) Fase ajustable (25/75)",
    "6) Esfera de Bloch",
])

# ---- Paso 1 ----
with tab1:
    st.subheader("Paso 1 ‚Äî Moneda cu√°ntica (H + medida)")
    st.write("Aplicamos **H** a `|0‚ü©` y luego medimos: deber√≠as ver ~50% de `0` y ~50% de `1`.")
    shots = st.number_input("Shots", min_value=100, max_value=100000, step=100, value=DEFAULT_SHOTS)

    if st.button("Ejecutar Paso 1", key="p1"):
        qc = QuantumCircuit(1)
        qc.h(0)
        qc.measure_all()
        run_and_plot_counts(qc, shots=shots, title="H |0‚ü© ‚Üí 50/50", base_name="p1_moneda")

# ---- Paso 2 ----
with tab2:
    st.subheader("Paso 2 ‚Äî Valores esperados ‚ü®Z‚ü© y ‚ü®X‚ü© sin medir")
    st.write(
        "Con **H** sobre `|0‚ü©` obtenemos `|+‚ü©`. Sin medir, calculamos expectativas: ‚ü®Z‚ü©‚âà0 y ‚ü®X‚ü©‚âà+1."
    )

    if st.button("Calcular expectativas", key="p2"):
        qc = QuantumCircuit(1)
        qc.h(0)
        psi = Statevector.from_instruction(qc)
        expZ = float(np.real(psi.expectation_value(Pauli("Z"))))
        expX = float(np.real(psi.expectation_value(Pauli("X"))))
        st.code(draw_circuit_text(qc), language="text")
        st.metric("‚ü®Z‚ü© (esperado ~0)", f"{expZ:.6f}")
        st.metric("‚ü®X‚ü© (esperado ~+1)", f"{expX:.6f}")

# ---- Paso 3 ----
with tab3:
    st.subheader("Paso 3 ‚Äî Dos Hadamard seguidas (H¬∑H = I)")
    st.write("Aplicar **H** dos veces equivale a la identidad: volvemos a `|0‚ü©`.")
    shots = st.number_input("Shots", min_value=100, max_value=100000, step=100, value=DEFAULT_SHOTS, key="shots3")

    if st.button("Ejecutar Paso 3", key="p3"):
        qc = QuantumCircuit(1)
        qc.h(0)
        qc.h(0)
        qc.measure_all()
        run_and_plot_counts(qc, shots=shots, title="H H |0‚ü© ‚Üí |0‚ü©", base_name="p3_hh")

# ---- Paso 4 ----
with tab4:
    st.subheader("Paso 4 ‚Äî Fase œÄ entre dos H (resultado favorece '1')")
    st.write("Insertamos **fase œÄ** entre dos H: la interferencia ahora favorece medir `1`.")
    shots = st.number_input("Shots", min_value=100, max_value=100000, step=100, value=DEFAULT_SHOTS, key="shots4")

    if st.button("Ejecutar Paso 4", key="p4"):
        qc = QuantumCircuit(1)
        qc.h(0)
        qc.p(math.pi, 0)
        qc.h(0)
        qc.measure_all()
        run_and_plot_counts(qc, shots=shots, title="H ‚Äì P(œÄ) ‚Äì H ‚Üí |1‚ü©", base_name="p4_fase_pi")

# ---- Paso 5 ----
with tab5:
    st.subheader("Paso 5 ‚Äî Eleg√≠ la fase œÜ para ajustar las probabilidades")
    st.write(
        "Con **H ‚Äì RZ(œÜ) ‚Äì H** podemos mover la probabilidad de `0`/`1`. \n"
        "Por ejemplo, con œÜ=2œÄ/3 se espera ~25% `0` / ~75% `1`."
    )

    col_a, col_b = st.columns(2)
    with col_a:
        # Fase en radianes con control deslizante (0 a 2œÄ)
        phi = st.slider(
            "Fase œÜ (radianes)",
            min_value=0.0,
            max_value=float(2 * math.pi),
            value=float(2 * math.pi / 3),
            step=0.01,
        )
    with col_b:
        shots = st.number_input("Shots", min_value=100, max_value=200000, step=100, value=20000)

    if st.button("Ejecutar Paso 5", key="p5"):
        qc = QuantumCircuit(1)
        qc.h(0)
        qc.rz(phi, 0)
        qc.h(0)
        qc.measure_all()
        counts = run_and_plot_counts(qc, shots=shots, title=f"H ‚Äì RZ({phi:.2f}) ‚Äì H", base_name="p5_fase")
        total = sum(counts.values()) or 1
        p0 = counts.get('0', 0) / total
        p1 = counts.get('1', 0) / total
        st.write(f"Proporciones observadas: **P(0)‚âà{100*p0:.2f}%** ‚Ä¢ **P(1)‚âà{100*p1:.2f}%** ")
        st.caption("Te√≥rico: P(0)=cos¬≤(œÜ/2), P(1)=sin¬≤(œÜ/2)")

# ---- Paso 6 ----
with tab6:
    st.subheader("Paso 6 ‚Äî Visualizaci√≥n en la esfera de Bloch")
    st.write("Explora dos estados clave: `|+‚ü©` (tras aplicar H) y el estado tras **‚àöX (sx)**.")

    if st.button("Mostrar Bloch de H y ‚àöX", key="p6"):
        # Estado A: |+> con H
        qc_h = QuantumCircuit(1)
        qc_h.h(0)
        sv_h = Statevector.from_instruction(qc_h)
        st.markdown("**Circuito H:**")
        st.code(draw_circuit_text(qc_h), language="text")
        try:
            fig_h = plot_bloch_multivector(sv_h)
            st.pyplot(fig_h)
            if SAVE_PNGS:
                save_fig(fig_h, "p6_bloch_h")
            else:
                plt.close(fig_h)
        except Exception as e:
            st.warning(f"Bloch H: {e}")

        # Estado B: sobre ecuador con ‚àöX (sx)
        qc_sx = QuantumCircuit(1)
        qc_sx.sx(0)
        sv_sx = Statevector.from_instruction(qc_sx)
        st.markdown("**Circuito ‚àöX (sx):**")
        st.code(draw_circuit_text(qc_sx), language="text")
        try:
            fig_sx = plot_bloch_multivector(sv_sx)
            st.pyplot(fig_sx)
            if SAVE_PNGS:
                save_fig(fig_sx, "p6_bloch_sx")
            else:
                plt.close(fig_sx)
        except Exception as e:
            st.warning(f"Bloch ‚àöX: {e}")

# =================== Cierre ===================
st.divider()
st.markdown(
    """
    **Sugerencias para explorar**
    - Cambi√° la fase œÜ y compar√° los resultados con la predicci√≥n te√≥rica `cos¬≤(œÜ/2)` / `sin¬≤(œÜ/2)`.
    - Increment√° *shots* para observar c√≥mo las frecuencias se acercan a las probabilidades te√≥ricas.
    - Reemplaz√° `RZ(œÜ)` por `P(œÜ)` y verific√° que el efecto estad√≠stico sea equivalente.
    """
)
